openapi: 3.0.3
info:
  title: Swagger transaction - OpenAPI 3.0
  description: |-
    This is a sample transaction Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the transaction store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of transactionstore, then click [here](https://editor.swagger.io/?url=https://transactionstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load transactionstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The transaction Store repository](https://github.com/swagger-api/swagger-transactionstore)
    - [The source API definition for the transaction Store](https://github.com/swagger-api/swagger-transactionstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://transactionstore3.swagger.io/api/v3
tags:
  - name: transaction
    description: Everything about your transactions
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /account/transactions:
    get:
      tags:
        - transaction
      summary: Get all transactions
      description: Get all transactions
      operationId: getalltransaction
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction'          
            application/xml:
              schema:
                $ref: '#/components/schemas/transaction'
        '400':
          description: Invalid ID supplied
        '404':
          description: transaction not found
        '405':
          description: Validation exception
      security:
        - transactionstore_auth:
            - write:transactions
            - read:transactions
    post:
      tags:
        - transaction
      summary: Add a new transaction 
      description: Add a new transaction
      operationId: addtransaction
      requestBody:
        description: Create a new transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transaction'
          application/xml:
            schema:
              $ref: '#/components/schemas/transaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/transaction'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction'          
            application/xml:
              schema:
                $ref: '#/components/schemas/transaction'
        '405':
          description: Invalid input
      security:
        - transactionstore_auth:
            - write:transactions
            - read:transactions
  /account/transactions/{transactionId}:
    get:
      tags:
        - transaction
      summary: Find transaction by ID
      description: Returns a single transaction
      operationId: gettransactionById
      parameters:
        - name: transactionId
          in: path
          description: ID of transaction to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction'          
            application/xml:
              schema:
                $ref: '#/components/schemas/transaction'
        '400':
          description: Invalid ID supplied
        '404':
          description: transaction not found
      security:
        - api_key: []
        - transactionstore_auth:
            - write:transactions
            - read:transactions
    put:
      tags:
        - transaction
      summary: Update an existing transaction by ID
      description: Update an existing transaction by ID
      operationId: updatetransaction
      parameters:
       - name: transactionId
         in: path
         description: ID of transaction to return
         required: true
         schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction'          
            application/xml:
              schema:
                $ref: '#/components/schemas/transaction'
        '400':
          description: Invalid ID supplied
        '404':
          description: transaction not found
        '405':
          description: Validation exception
      security:
        - transactionstore_auth:
            - write:transactions
            - read:transactions
    delete:
      tags:
        - transaction
      summary: Delete a transaction by ID
      description: delete a transaction by ID
      operationId: deletetransaction
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: transactionId
          in: path
          description: transaction id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid transaction value
      security:
        - transactionstore_auth:
            - write:transactions
            - read:transactions
components:
  schemas:
    transaction:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: name of transaction
        Amount: 
          type: number
          example: 500
        comment: 
          type: string
        recipient: 
          type: string
          example: Dupont
        created: 
          type: string
          example: "01/01/2012"
      xml:
        name: transaction
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    transaction:
      description: transaction object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/transaction'
        application/xml:
          schema:
            $ref: '#/components/schemas/transaction'
    # UserArray:
    #   description: List of user object
    #   content:
    #     application/json:
    #       schema:
    #         type: array
    #         items:
    #           $ref: '#/components/schemas/User'
  securitySchemes:
    transactionstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://transactionstore3.swagger.io/oauth/authorize
          scopes:
            write:transactions: modify transactions in your account
            read:transactions: read your transactions
    api_key:
      type: apiKey
      name: api_key
      in: header